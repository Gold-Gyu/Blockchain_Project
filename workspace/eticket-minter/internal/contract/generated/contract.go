// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ContractMetaData contains all meta data concerning the Contract contract.
var ContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"}],\"name\":\"getTicketDefaultContentBaseUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"}],\"name\":\"getTicketSpecialContentBaseUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"}],\"name\":\"isPerformanceScheduled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isTicketExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"seatId\",\"type\":\"uint32\"}],\"name\":\"isTicketMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"seatId\",\"type\":\"uint32\"}],\"name\":\"isTicketUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"seatId\",\"type\":\"uint32\"}],\"name\":\"makeTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"seatId\",\"type\":\"uint32\"}],\"name\":\"markTicketAsUsed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receipent\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"seatId\",\"type\":\"uint32\"}],\"name\":\"mintTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"obtainPerformanceScheduleId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"obtainSeatId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"ticketExpirationTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ticketDefaultContentUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ticketSpecialContentBaseUrl\",\"type\":\"string\"}],\"name\":\"schedulePerformance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"newTicketDeafultContentBaseUrl\",\"type\":\"string\"}],\"name\":\"setTicketDefaultContentBaseUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"newTicketSpecialContentBaseUrl\",\"type\":\"string\"}],\"name\":\"setTicketSpecialContentBaseUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"}],\"name\":\"ticketExpirationTimeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"seatId\",\"type\":\"uint32\"}],\"name\":\"ticketOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162004abd38038062004abd8339818101604052810190620000379190620002e6565b8181620000596200004d6200008760201b60201c565b6200008f60201b60201c565b81600190816200006a9190620005b6565b5080600290816200007c9190620005b6565b50505050506200069d565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001bc8262000171565b810181811067ffffffffffffffff82111715620001de57620001dd62000182565b5b80604052505050565b6000620001f362000153565b9050620002018282620001b1565b919050565b600067ffffffffffffffff82111562000224576200022362000182565b5b6200022f8262000171565b9050602081019050919050565b60005b838110156200025c5780820151818401526020810190506200023f565b60008484015250505050565b60006200027f620002798462000206565b620001e7565b9050828152602081018484840111156200029e576200029d6200016c565b5b620002ab8482856200023c565b509392505050565b600082601f830112620002cb57620002ca62000167565b5b8151620002dd84826020860162000268565b91505092915050565b600080604083850312156200030057620002ff6200015d565b5b600083015167ffffffffffffffff81111562000321576200032062000162565b5b6200032f85828601620002b3565b925050602083015167ffffffffffffffff81111562000353576200035262000162565b5b6200036185828601620002b3565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003be57607f821691505b602082108103620003d457620003d362000376565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200043e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620003ff565b6200044a8683620003ff565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000497620004916200048b8462000462565b6200046c565b62000462565b9050919050565b6000819050919050565b620004b38362000476565b620004cb620004c2826200049e565b8484546200040c565b825550505050565b600090565b620004e2620004d3565b620004ef818484620004a8565b505050565b5b8181101562000517576200050b600082620004d8565b600181019050620004f5565b5050565b601f82111562000566576200053081620003da565b6200053b84620003ef565b810160208510156200054b578190505b620005636200055a85620003ef565b830182620004f4565b50505b505050565b600082821c905092915050565b60006200058b600019846008026200056b565b1980831691505092915050565b6000620005a6838362000578565b9150826002028217905092915050565b620005c1826200036b565b67ffffffffffffffff811115620005dd57620005dc62000182565b5b620005e98254620003a5565b620005f68282856200051b565b600060209050601f8311600181146200062e576000841562000619578287015190505b62000625858262000598565b86555062000695565b601f1984166200063e86620003da565b60005b82811015620006685784890151825560018201915060208501945060208101905062000641565b8683101562000688578489015162000684601f89168262000578565b8355505b6001600288020188555050505b505050505050565b61441080620006ad6000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c80635fdac1a311610125578063a846b84b116100ad578063e58efe991161007c578063e58efe9914610694578063e985e9c5146106c4578063ef866e0e146106f4578063f2fde38b14610724578063f33df8431461074057610211565b8063a846b84b146105e8578063b88d4fde14610618578063c87b56dd14610634578063d0c8c3dc1461066457610211565b806370a08231116100f457806370a0823114610556578063715018a6146105865780638da5cb5b1461059057806395d89b41146105ae578063a22cb465146105cc57610211565b80635fdac1a3146104aa5780636352211e146104c65780636eed43a1146104f65780636f074cce1461052657610211565b806322f2dc3c116101a8578063359e812911610177578063359e8129146103f65780633910ce65146104125780633a28ea571461042e57806342842e0e1461045e5780634f6ccce71461047a57610211565b806322f2dc3c1461034a57806323b872dd1461037a5780632ad62306146103965780632f745c59146103c657610211565b8063095ea7b3116101e4578063095ea7b3146102b057806318160ddd146102cc5780631a428694146102ea578063210f21581461031a57610211565b806301ffc9a71461021657806306acb25f1461024657806306fdde0314610262578063081812fc14610280575b600080fd5b610230600480360381019061022b9190612c4a565b61075c565b60405161023d9190612c92565b60405180910390f35b610260600480360381019061025b9190612e65565b6107d6565b005b61026a6108a4565b6040516102779190612f83565b60405180910390f35b61029a60048036038101906102959190612fa5565b610936565b6040516102a79190613013565b60405180910390f35b6102ca60048036038101906102c5919061305a565b61097c565b005b6102d4610a93565b6040516102e191906130a9565b60405180910390f35b61030460048036038101906102ff91906130c4565b610aa0565b6040516103119190612c92565b60405180910390f35b610334600480360381019061032f91906130c4565b610ad7565b60405161034191906130a9565b60405180910390f35b610364600480360381019061035f91906130c4565b610af4565b6040516103719190612c92565b60405180910390f35b610394600480360381019061038f9190613104565b610b51565b005b6103b060048036038101906103ab9190613157565b610bb1565b6040516103bd9190612f83565b60405180910390f35b6103e060048036038101906103db919061305a565b610bcc565b6040516103ed91906130a9565b60405180910390f35b610410600480360381019061040b9190613184565b610c71565b005b61042c600480360381019061042791906131e0565b610cb6565b005b61044860048036038101906104439190612fa5565b610cce565b6040516104559190613242565b60405180910390f35b61047860048036038101906104739190613104565b610cde565b005b610494600480360381019061048f9190612fa5565b610cfe565b6040516104a191906130a9565b60405180910390f35b6104c460048036038101906104bf91906130c4565b610d6f565b005b6104e060048036038101906104db9190612fa5565b610dc2565b6040516104ed9190613013565b60405180910390f35b610510600480360381019061050b9190612fa5565b610e48565b60405161051d9190613242565b60405180910390f35b610540600480360381019061053b9190613157565b610e5c565b60405161054d91906130a9565b60405180910390f35b610570600480360381019061056b919061325d565b610e77565b60405161057d91906130a9565b60405180910390f35b61058e610f2e565b005b610598610f42565b6040516105a59190613013565b60405180910390f35b6105b6610f6b565b6040516105c39190612f83565b60405180910390f35b6105e660048036038101906105e191906132b6565b610ffd565b005b61060260048036038101906105fd91906130c4565b611013565b60405161060f9190613013565b60405180910390f35b610632600480360381019061062d9190613397565b61103d565b005b61064e60048036038101906106499190612fa5565b61109f565b60405161065b9190612f83565b60405180910390f35b61067e60048036038101906106799190612fa5565b611176565b60405161068b9190612c92565b60405180910390f35b6106ae60048036038101906106a99190613157565b611199565b6040516106bb9190612f83565b60405180910390f35b6106de60048036038101906106d9919061341a565b6111b4565b6040516106eb9190612c92565b60405180910390f35b61070e60048036038101906107099190613157565b611248565b60405161071b9190612c92565b60405180910390f35b61073e6004803603810190610739919061325d565b611281565b005b61075a60048036038101906107559190613184565b611304565b005b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107cf57506107ce82611349565b5b9050919050565b6107de61142b565b6000600b60008663ffffffff1663ffffffff16815260200190815260200160002090508060050160009054906101000a900460ff1615610853576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084a906134cc565b60405180910390fd5b60018160050160006101000a81548160ff0219169083151502179055508381600201819055508281600301908161088a91906136f8565b508181600401908161089c91906136f8565b505050505050565b6060600180546108b39061351b565b80601f01602080910402602001604051908101604052809291908181526020018280546108df9061351b565b801561092c5780601f106109015761010080835404028352916020019161092c565b820191906000526020600020905b81548152906001019060200180831161090f57829003601f168201915b5050505050905090565b6000610941826114a9565b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061098782610dc2565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036109f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ee9061383c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610a166114f4565b73ffffffffffffffffffffffffffffffffffffffff161480610a455750610a4481610a3f6114f4565b6111b4565b5b610a84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7b906138ce565b60405180910390fd5b610a8e83836114fc565b505050565b6000600980549050905090565b6000610ab4610aaf8484610ad7565b6114a9565b610abe83836115b5565b60000160009054906101000a900460ff16905092915050565b60008163ffffffff1660208463ffffffff16901b17905092915050565b6000610aff83611635565b6000600b60008563ffffffff1663ffffffff168152602001908152602001600020905060008160000160008563ffffffff1663ffffffff16815260200190815260200160002054141591505092915050565b610b62610b5c6114f4565b826116a7565b610ba1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9890613960565b60405180910390fd5b610bac83838361173c565b505050565b6060610bbc82611635565b610bc582611a35565b9050919050565b6000610bd783610e77565b8210610c18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0f906139f2565b60405180910390fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610c7961142b565b610c8282611635565b80600b60008463ffffffff1663ffffffff1681526020019081526020016000206004019081610cb191906136f8565b505050565b610cbe61142b565b610cc9838383611ae9565b505050565b600063ffffffff82169050919050565b610cf98383836040518060200160405280600081525061103d565b505050565b6000610d08610a93565b8210610d49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4090613a84565b60405180910390fd5b60098281548110610d5d57610d5c613aa4565b5b90600052602060002001549050919050565b610d7761142b565b610d8082611635565b610d92610d8d8383610ad7565b6114a9565b6000610d9e83836115b5565b905060018160000160006101000a81548160ff021916908315150217905550505050565b600080610dce83611c22565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3690613b1f565b60405180910390fd5b80915050919050565b600063ffffffff602083901c169050919050565b6000610e6782611635565b610e7082611c5f565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ee7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ede90613bb1565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610f3661142b565b610f406000611c90565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060028054610f7a9061351b565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa69061351b565b8015610ff35780601f10610fc857610100808354040283529160200191610ff3565b820191906000526020600020905b815481529060010190602001808311610fd657829003601f168201915b5050505050905090565b61100f6110086114f4565b8383611d54565b5050565b6000806110208484610ad7565b905061102b816114a9565b61103481610dc2565b91505092915050565b61104e6110486114f4565b836116a7565b61108d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108490613960565b60405180910390fd5b61109984848484611ec0565b50505050565b60606110aa826114a9565b60006110b583610e48565b905060006110c284610cce565b905060006110d083836115b5565b90506110db85611f1c565b15806110f657508060000160009054906101000a900460ff16155b1561110f576111058383611f44565b9350505050611171565b600061111a84611fae565b9050600081510361113a5761112f8484611f44565b945050505050611171565b8061114a8463ffffffff16612062565b60405160200161115b929190613c59565b6040516020818303038152906040529450505050505b919050565b600061118961118483610e48565b611635565b61119282611f1c565b9050919050565b60606111a482611635565b6111ad82611fae565b9050919050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600b60008363ffffffff1663ffffffff16815260200190815260200160002060050160009054906101000a900460ff169050919050565b61128961142b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036112f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ef90613cfa565b60405180910390fd5b61130181611c90565b50565b61130c61142b565b61131582611635565b80600b60008463ffffffff1663ffffffff168152602001908152602001600020600301908161134491906136f8565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061141457507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611424575061142382612130565b5b9050919050565b6114336114f4565b73ffffffffffffffffffffffffffffffffffffffff16611451610f42565b73ffffffffffffffffffffffffffffffffffffffff16146114a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149e90613d66565b60405180910390fd5b565b6114b28161219a565b6114f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e890613b1f565b60405180910390fd5b50565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661156f83610dc2565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080600b60008563ffffffff1663ffffffff168152602001908152602001600020905060008160000160008563ffffffff1663ffffffff168152602001908152602001600020549050816001016001826116109190613db5565b8154811061162157611620613aa4565b5b906000526020600020019250505092915050565b600b60008263ffffffff1663ffffffff16815260200190815260200160002060050160009054906101000a900460ff166116a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169b90613e5b565b60405180910390fd5b50565b6000806116b383610dc2565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806116f557506116f481856111b4565b5b8061173357508373ffffffffffffffffffffffffffffffffffffffff1661171b84610936565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661175c82610dc2565b73ffffffffffffffffffffffffffffffffffffffff16146117b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a990613eed565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611821576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181890613f7f565b60405180910390fd5b61182e83838360016121db565b8273ffffffffffffffffffffffffffffffffffffffff1661184e82610dc2565b73ffffffffffffffffffffffffffffffffffffffff16146118a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189b90613eed565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611a308383836001612339565b505050565b6060600b60008363ffffffff1663ffffffff1681526020019081526020016000206003018054611a649061351b565b80601f0160208091040260200160405190810160405280929190818152602001828054611a909061351b565b8015611add5780601f10611ab257610100808354040283529160200191611add565b820191906000526020600020905b815481529060010190602001808311611ac057829003601f168201915b50505050509050919050565b611af282611635565b6000600b60008463ffffffff1663ffffffff168152602001908152602001600020905060008160000160008463ffffffff1663ffffffff1681526020019081526020016000205414611b79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7090614011565b60405180910390fd5b6000611b858484610ad7565b9050611b91858261233f565b816001016040518060200160405280600015158152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff021916908315150217905550505081600101805490508260000160008563ffffffff1663ffffffff168152602001908152602001600020819055505050505050565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080600b60008463ffffffff1663ffffffff16815260200190815260200160002090508060020154915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611dc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db99061407d565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611eb39190612c92565b60405180910390a3505050565b611ecb84848461173c565b611ed78484848461235d565b611f16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0d9061410f565b60405180910390fd5b50505050565b600080611f2883610e48565b90506000611f3582611c5f565b90504281111592505050919050565b60606000611f5184611a35565b90506000815103611f745760405180602001604052806000815250915050611fa8565b80611f848463ffffffff16612062565b604051602001611f95929190613c59565b6040516020818303038152906040529150505b92915050565b6060600b60008363ffffffff1663ffffffff1681526020019081526020016000206004018054611fdd9061351b565b80601f01602080910402602001604051908101604052809291908181526020018280546120099061351b565b80156120565780601f1061202b57610100808354040283529160200191612056565b820191906000526020600020905b81548152906001019060200180831161203957829003601f168201915b50505050509050919050565b606060006001612071846124e4565b01905060008167ffffffffffffffff8111156120905761208f612d3a565b5b6040519080825280601f01601f1916602001820160405280156120c25781602001600182028036833780820191505090505b509050600082602001820190505b600115612125578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816121195761211861412f565b5b049450600085036120d0575b819350505050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166121bc83611c22565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6121e784848484612637565b600181111561222b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612222906141d0565b60405180910390fd5b6000829050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036122725761226d8161263d565b6122b1565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146122b0576122af8582612686565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036122f3576122ee816127f3565b612332565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146123315761233084826128c4565b5b5b5050505050565b50505050565b612359828260405180602001604052806000815250612943565b5050565b600061237e8473ffffffffffffffffffffffffffffffffffffffff1661299e565b156124d7578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026123a76114f4565b8786866040518563ffffffff1660e01b81526004016123c99493929190614245565b6020604051808303816000875af192505050801561240557506040513d601f19601f8201168201806040525081019061240291906142a6565b60015b612487573d8060008114612435576040519150601f19603f3d011682016040523d82523d6000602084013e61243a565b606091505b50600081510361247f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124769061410f565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506124dc565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612542577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816125385761253761412f565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061257f576d04ee2d6d415b85acef810000000083816125755761257461412f565b5b0492506020810190505b662386f26fc1000083106125ae57662386f26fc1000083816125a4576125a361412f565b5b0492506010810190505b6305f5e10083106125d7576305f5e10083816125cd576125cc61412f565b5b0492506008810190505b61271083106125fc5761271083816125f2576125f161412f565b5b0492506004810190505b6064831061261f57606483816126155761261461412f565b5b0492506002810190505b600a831061262e576001810190505b80915050919050565b50505050565b600980549050600a600083815260200190815260200160002081905550600981908060018154018082558091505060019003906000526020600020016000909190919091505550565b6000600161269384610e77565b61269d9190613db5565b9050600060086000848152602001908152602001600020549050818114612782576000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816008600083815260200190815260200160002081905550505b6008600084815260200190815260200160002060009055600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016009805490506128079190613db5565b90506000600a600084815260200190815260200160002054905060006009838154811061283757612836613aa4565b5b90600052602060002001549050806009838154811061285957612858613aa4565b5b906000526020600020018190555081600a600083815260200190815260200160002081905550600a60008581526020019081526020016000206000905560098054806128a8576128a76142d3565b5b6001900381819060005260206000200160009055905550505050565b60006128cf83610e77565b905081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806008600084815260200190815260200160002081905550505050565b61294d83836129c1565b61295a600084848461235d565b612999576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129909061410f565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612a30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a279061434e565b60405180910390fd5b612a398161219a565b15612a79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a70906143ba565b60405180910390fd5b612a876000838360016121db565b612a908161219a565b15612ad0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ac7906143ba565b60405180910390fd5b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612bda600083836001612339565b5050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612c2781612bf2565b8114612c3257600080fd5b50565b600081359050612c4481612c1e565b92915050565b600060208284031215612c6057612c5f612be8565b5b6000612c6e84828501612c35565b91505092915050565b60008115159050919050565b612c8c81612c77565b82525050565b6000602082019050612ca76000830184612c83565b92915050565b600063ffffffff82169050919050565b612cc681612cad565b8114612cd157600080fd5b50565b600081359050612ce381612cbd565b92915050565b6000819050919050565b612cfc81612ce9565b8114612d0757600080fd5b50565b600081359050612d1981612cf3565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612d7282612d29565b810181811067ffffffffffffffff82111715612d9157612d90612d3a565b5b80604052505050565b6000612da4612bde565b9050612db08282612d69565b919050565b600067ffffffffffffffff821115612dd057612dcf612d3a565b5b612dd982612d29565b9050602081019050919050565b82818337600083830152505050565b6000612e08612e0384612db5565b612d9a565b905082815260208101848484011115612e2457612e23612d24565b5b612e2f848285612de6565b509392505050565b600082601f830112612e4c57612e4b612d1f565b5b8135612e5c848260208601612df5565b91505092915050565b60008060008060808587031215612e7f57612e7e612be8565b5b6000612e8d87828801612cd4565b9450506020612e9e87828801612d0a565b935050604085013567ffffffffffffffff811115612ebf57612ebe612bed565b5b612ecb87828801612e37565b925050606085013567ffffffffffffffff811115612eec57612eeb612bed565b5b612ef887828801612e37565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b60005b83811015612f3e578082015181840152602081019050612f23565b60008484015250505050565b6000612f5582612f04565b612f5f8185612f0f565b9350612f6f818560208601612f20565b612f7881612d29565b840191505092915050565b60006020820190508181036000830152612f9d8184612f4a565b905092915050565b600060208284031215612fbb57612fba612be8565b5b6000612fc984828501612d0a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612ffd82612fd2565b9050919050565b61300d81612ff2565b82525050565b60006020820190506130286000830184613004565b92915050565b61303781612ff2565b811461304257600080fd5b50565b6000813590506130548161302e565b92915050565b6000806040838503121561307157613070612be8565b5b600061307f85828601613045565b925050602061309085828601612d0a565b9150509250929050565b6130a381612ce9565b82525050565b60006020820190506130be600083018461309a565b92915050565b600080604083850312156130db576130da612be8565b5b60006130e985828601612cd4565b92505060206130fa85828601612cd4565b9150509250929050565b60008060006060848603121561311d5761311c612be8565b5b600061312b86828701613045565b935050602061313c86828701613045565b925050604061314d86828701612d0a565b9150509250925092565b60006020828403121561316d5761316c612be8565b5b600061317b84828501612cd4565b91505092915050565b6000806040838503121561319b5761319a612be8565b5b60006131a985828601612cd4565b925050602083013567ffffffffffffffff8111156131ca576131c9612bed565b5b6131d685828601612e37565b9150509250929050565b6000806000606084860312156131f9576131f8612be8565b5b600061320786828701613045565b935050602061321886828701612cd4565b925050604061322986828701612cd4565b9150509250925092565b61323c81612cad565b82525050565b60006020820190506132576000830184613233565b92915050565b60006020828403121561327357613272612be8565b5b600061328184828501613045565b91505092915050565b61329381612c77565b811461329e57600080fd5b50565b6000813590506132b08161328a565b92915050565b600080604083850312156132cd576132cc612be8565b5b60006132db85828601613045565b92505060206132ec858286016132a1565b9150509250929050565b600067ffffffffffffffff82111561331157613310612d3a565b5b61331a82612d29565b9050602081019050919050565b600061333a613335846132f6565b612d9a565b90508281526020810184848401111561335657613355612d24565b5b613361848285612de6565b509392505050565b600082601f83011261337e5761337d612d1f565b5b813561338e848260208601613327565b91505092915050565b600080600080608085870312156133b1576133b0612be8565b5b60006133bf87828801613045565b94505060206133d087828801613045565b93505060406133e187828801612d0a565b925050606085013567ffffffffffffffff81111561340257613401612bed565b5b61340e87828801613369565b91505092959194509250565b6000806040838503121561343157613430612be8565b5b600061343f85828601613045565b925050602061345085828601613045565b9150509250929050565b7f7363686564756c65506572666f726d616e636528293a20706572666f726d616e60008201527f636520616c7265616479207363686564756c65642e0000000000000000000000602082015250565b60006134b6603583612f0f565b91506134c18261345a565b604082019050919050565b600060208201905081810360008301526134e5816134a9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061353357607f821691505b602082108103613546576135456134ec565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026135ae7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613571565b6135b88683613571565b95508019841693508086168417925050509392505050565b6000819050919050565b60006135f56135f06135eb84612ce9565b6135d0565b612ce9565b9050919050565b6000819050919050565b61360f836135da565b61362361361b826135fc565b84845461357e565b825550505050565b600090565b61363861362b565b613643818484613606565b505050565b5b818110156136675761365c600082613630565b600181019050613649565b5050565b601f8211156136ac5761367d8161354c565b61368684613561565b81016020851015613695578190505b6136a96136a185613561565b830182613648565b50505b505050565b600082821c905092915050565b60006136cf600019846008026136b1565b1980831691505092915050565b60006136e883836136be565b9150826002028217905092915050565b61370182612f04565b67ffffffffffffffff81111561371a57613719612d3a565b5b613724825461351b565b61372f82828561366b565b600060209050601f8311600181146137625760008415613750578287015190505b61375a85826136dc565b8655506137c2565b601f1984166137708661354c565b60005b8281101561379857848901518255600182019150602085019450602081019050613773565b868310156137b557848901516137b1601f8916826136be565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613826602183612f0f565b9150613831826137ca565b604082019050919050565b6000602082019050818103600083015261385581613819565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b60006138b8603d83612f0f565b91506138c38261385c565b604082019050919050565b600060208201905081810360008301526138e7816138ab565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b600061394a602d83612f0f565b9150613955826138ee565b604082019050919050565b600060208201905081810360008301526139798161393d565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b60006139dc602b83612f0f565b91506139e782613980565b604082019050919050565b60006020820190508181036000830152613a0b816139cf565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000613a6e602c83612f0f565b9150613a7982613a12565b604082019050919050565b60006020820190508181036000830152613a9d81613a61565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000613b09601883612f0f565b9150613b1482613ad3565b602082019050919050565b60006020820190508181036000830152613b3881613afc565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613b9b602983612f0f565b9150613ba682613b3f565b604082019050919050565b60006020820190508181036000830152613bca81613b8e565b9050919050565b600081905092915050565b6000613be782612f04565b613bf18185613bd1565b9350613c01818560208601612f20565b80840191505092915050565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000600082015250565b6000613c43600583613bd1565b9150613c4e82613c0d565b600582019050919050565b6000613c658285613bdc565b9150613c718284613bdc565b9150613c7c82613c36565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613ce4602683612f0f565b9150613cef82613c88565b604082019050919050565b60006020820190508181036000830152613d1381613cd7565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613d50602083612f0f565b9150613d5b82613d1a565b602082019050919050565b60006020820190508181036000830152613d7f81613d43565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613dc082612ce9565b9150613dcb83612ce9565b9250828203905081811115613de357613de2613d86565b5b92915050565b7f5f617373657274506572666f726d616e63655363686564756c65643a2070657260008201527f666f726d616e6365206973206e6f74207363686564756c656400000000000000602082015250565b6000613e45603983612f0f565b9150613e5082613de9565b604082019050919050565b60006020820190508181036000830152613e7481613e38565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000613ed7602583612f0f565b9150613ee282613e7b565b604082019050919050565b60006020820190508181036000830152613f0681613eca565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000613f69602483612f0f565b9150613f7482613f0d565b604082019050919050565b60006020820190508181036000830152613f9881613f5c565b9050919050565b7f5f6d696e745469636b657428293a207469636b65742077617320616c7265616460008201527f79206d696e746564000000000000000000000000000000000000000000000000602082015250565b6000613ffb602883612f0f565b915061400682613f9f565b604082019050919050565b6000602082019050818103600083015261402a81613fee565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000614067601983612f0f565b915061407282614031565b602082019050919050565b600060208201905081810360008301526140968161405a565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006140f9603283612f0f565b91506141048261409d565b604082019050919050565b60006020820190508181036000830152614128816140ec565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f455243373231456e756d657261626c653a20636f6e736563757469766520747260008201527f616e7366657273206e6f7420737570706f727465640000000000000000000000602082015250565b60006141ba603583612f0f565b91506141c58261415e565b604082019050919050565b600060208201905081810360008301526141e9816141ad565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000614217826141f0565b61422181856141fb565b9350614231818560208601612f20565b61423a81612d29565b840191505092915050565b600060808201905061425a6000830187613004565b6142676020830186613004565b614274604083018561309a565b8181036060830152614286818461420c565b905095945050505050565b6000815190506142a081612c1e565b92915050565b6000602082840312156142bc576142bb612be8565b5b60006142ca84828501614291565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614338602083612f0f565b915061434382614302565b602082019050919050565b600060208201905081810360008301526143678161432b565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006143a4601c83612f0f565b91506143af8261436e565b602082019050919050565b600060208201905081810360008301526143d381614397565b905091905056fea264697066735822122028bffddbc84b2fdd5fe5df11d7ee76ce6d1261067237736c2658cf958c6ac48464736f6c63430008130033",
}

// ContractABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractMetaData.ABI instead.
var ContractABI = ContractMetaData.ABI

// ContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractMetaData.Bin instead.
var ContractBin = ContractMetaData.Bin

// DeployContract deploys a new Ethereum contract, binding an instance of Contract to it.
func DeployContract(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string) (common.Address, *types.Transaction, *Contract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractBin), backend, name_, symbol_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// Contract is an auto generated Go binding around an Ethereum contract.
type Contract struct {
	ContractCaller     // Read-only binding to the contract
	ContractTransactor // Write-only binding to the contract
	ContractFilterer   // Log filterer for contract events
}

// ContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractSession struct {
	Contract     *Contract         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractCallerSession struct {
	Contract *ContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractTransactorSession struct {
	Contract     *ContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractRaw struct {
	Contract *Contract // Generic contract binding to access the raw methods on
}

// ContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractCallerRaw struct {
	Contract *ContractCaller // Generic read-only contract binding to access the raw methods on
}

// ContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractTransactorRaw struct {
	Contract *ContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContract creates a new instance of Contract, bound to a specific deployed contract.
func NewContract(address common.Address, backend bind.ContractBackend) (*Contract, error) {
	contract, err := bindContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// NewContractCaller creates a new read-only instance of Contract, bound to a specific deployed contract.
func NewContractCaller(address common.Address, caller bind.ContractCaller) (*ContractCaller, error) {
	contract, err := bindContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractCaller{contract: contract}, nil
}

// NewContractTransactor creates a new write-only instance of Contract, bound to a specific deployed contract.
func NewContractTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractTransactor, error) {
	contract, err := bindContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTransactor{contract: contract}, nil
}

// NewContractFilterer creates a new log filterer instance of Contract, bound to a specific deployed contract.
func NewContractFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractFilterer, error) {
	contract, err := bindContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractFilterer{contract: contract}, nil
}

// bindContract binds a generic wrapper to an already deployed contract.
func bindContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.ContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Contract *ContractCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Contract *ContractSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Contract.Contract.BalanceOf(&_Contract.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Contract *ContractCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Contract.Contract.BalanceOf(&_Contract.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Contract *ContractCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Contract *ContractSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Contract.Contract.GetApproved(&_Contract.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Contract *ContractCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Contract.Contract.GetApproved(&_Contract.CallOpts, tokenId)
}

// GetTicketDefaultContentBaseUrl is a free data retrieval call binding the contract method 0x2ad62306.
//
// Solidity: function getTicketDefaultContentBaseUrl(uint32 performanceScheduleId) view returns(string)
func (_Contract *ContractCaller) GetTicketDefaultContentBaseUrl(opts *bind.CallOpts, performanceScheduleId uint32) (string, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getTicketDefaultContentBaseUrl", performanceScheduleId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetTicketDefaultContentBaseUrl is a free data retrieval call binding the contract method 0x2ad62306.
//
// Solidity: function getTicketDefaultContentBaseUrl(uint32 performanceScheduleId) view returns(string)
func (_Contract *ContractSession) GetTicketDefaultContentBaseUrl(performanceScheduleId uint32) (string, error) {
	return _Contract.Contract.GetTicketDefaultContentBaseUrl(&_Contract.CallOpts, performanceScheduleId)
}

// GetTicketDefaultContentBaseUrl is a free data retrieval call binding the contract method 0x2ad62306.
//
// Solidity: function getTicketDefaultContentBaseUrl(uint32 performanceScheduleId) view returns(string)
func (_Contract *ContractCallerSession) GetTicketDefaultContentBaseUrl(performanceScheduleId uint32) (string, error) {
	return _Contract.Contract.GetTicketDefaultContentBaseUrl(&_Contract.CallOpts, performanceScheduleId)
}

// GetTicketSpecialContentBaseUrl is a free data retrieval call binding the contract method 0xe58efe99.
//
// Solidity: function getTicketSpecialContentBaseUrl(uint32 performanceScheduleId) view returns(string)
func (_Contract *ContractCaller) GetTicketSpecialContentBaseUrl(opts *bind.CallOpts, performanceScheduleId uint32) (string, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getTicketSpecialContentBaseUrl", performanceScheduleId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetTicketSpecialContentBaseUrl is a free data retrieval call binding the contract method 0xe58efe99.
//
// Solidity: function getTicketSpecialContentBaseUrl(uint32 performanceScheduleId) view returns(string)
func (_Contract *ContractSession) GetTicketSpecialContentBaseUrl(performanceScheduleId uint32) (string, error) {
	return _Contract.Contract.GetTicketSpecialContentBaseUrl(&_Contract.CallOpts, performanceScheduleId)
}

// GetTicketSpecialContentBaseUrl is a free data retrieval call binding the contract method 0xe58efe99.
//
// Solidity: function getTicketSpecialContentBaseUrl(uint32 performanceScheduleId) view returns(string)
func (_Contract *ContractCallerSession) GetTicketSpecialContentBaseUrl(performanceScheduleId uint32) (string, error) {
	return _Contract.Contract.GetTicketSpecialContentBaseUrl(&_Contract.CallOpts, performanceScheduleId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Contract *ContractCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Contract *ContractSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Contract.Contract.IsApprovedForAll(&_Contract.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Contract *ContractCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Contract.Contract.IsApprovedForAll(&_Contract.CallOpts, owner, operator)
}

// IsPerformanceScheduled is a free data retrieval call binding the contract method 0xef866e0e.
//
// Solidity: function isPerformanceScheduled(uint32 performanceScheduleId) view returns(bool)
func (_Contract *ContractCaller) IsPerformanceScheduled(opts *bind.CallOpts, performanceScheduleId uint32) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "isPerformanceScheduled", performanceScheduleId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPerformanceScheduled is a free data retrieval call binding the contract method 0xef866e0e.
//
// Solidity: function isPerformanceScheduled(uint32 performanceScheduleId) view returns(bool)
func (_Contract *ContractSession) IsPerformanceScheduled(performanceScheduleId uint32) (bool, error) {
	return _Contract.Contract.IsPerformanceScheduled(&_Contract.CallOpts, performanceScheduleId)
}

// IsPerformanceScheduled is a free data retrieval call binding the contract method 0xef866e0e.
//
// Solidity: function isPerformanceScheduled(uint32 performanceScheduleId) view returns(bool)
func (_Contract *ContractCallerSession) IsPerformanceScheduled(performanceScheduleId uint32) (bool, error) {
	return _Contract.Contract.IsPerformanceScheduled(&_Contract.CallOpts, performanceScheduleId)
}

// IsTicketExpired is a free data retrieval call binding the contract method 0xd0c8c3dc.
//
// Solidity: function isTicketExpired(uint256 tokenId) view returns(bool)
func (_Contract *ContractCaller) IsTicketExpired(opts *bind.CallOpts, tokenId *big.Int) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "isTicketExpired", tokenId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTicketExpired is a free data retrieval call binding the contract method 0xd0c8c3dc.
//
// Solidity: function isTicketExpired(uint256 tokenId) view returns(bool)
func (_Contract *ContractSession) IsTicketExpired(tokenId *big.Int) (bool, error) {
	return _Contract.Contract.IsTicketExpired(&_Contract.CallOpts, tokenId)
}

// IsTicketExpired is a free data retrieval call binding the contract method 0xd0c8c3dc.
//
// Solidity: function isTicketExpired(uint256 tokenId) view returns(bool)
func (_Contract *ContractCallerSession) IsTicketExpired(tokenId *big.Int) (bool, error) {
	return _Contract.Contract.IsTicketExpired(&_Contract.CallOpts, tokenId)
}

// IsTicketMinted is a free data retrieval call binding the contract method 0x22f2dc3c.
//
// Solidity: function isTicketMinted(uint32 performanceScheduleId, uint32 seatId) view returns(bool)
func (_Contract *ContractCaller) IsTicketMinted(opts *bind.CallOpts, performanceScheduleId uint32, seatId uint32) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "isTicketMinted", performanceScheduleId, seatId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTicketMinted is a free data retrieval call binding the contract method 0x22f2dc3c.
//
// Solidity: function isTicketMinted(uint32 performanceScheduleId, uint32 seatId) view returns(bool)
func (_Contract *ContractSession) IsTicketMinted(performanceScheduleId uint32, seatId uint32) (bool, error) {
	return _Contract.Contract.IsTicketMinted(&_Contract.CallOpts, performanceScheduleId, seatId)
}

// IsTicketMinted is a free data retrieval call binding the contract method 0x22f2dc3c.
//
// Solidity: function isTicketMinted(uint32 performanceScheduleId, uint32 seatId) view returns(bool)
func (_Contract *ContractCallerSession) IsTicketMinted(performanceScheduleId uint32, seatId uint32) (bool, error) {
	return _Contract.Contract.IsTicketMinted(&_Contract.CallOpts, performanceScheduleId, seatId)
}

// IsTicketUsed is a free data retrieval call binding the contract method 0x1a428694.
//
// Solidity: function isTicketUsed(uint32 performanceScheduleId, uint32 seatId) view returns(bool)
func (_Contract *ContractCaller) IsTicketUsed(opts *bind.CallOpts, performanceScheduleId uint32, seatId uint32) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "isTicketUsed", performanceScheduleId, seatId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTicketUsed is a free data retrieval call binding the contract method 0x1a428694.
//
// Solidity: function isTicketUsed(uint32 performanceScheduleId, uint32 seatId) view returns(bool)
func (_Contract *ContractSession) IsTicketUsed(performanceScheduleId uint32, seatId uint32) (bool, error) {
	return _Contract.Contract.IsTicketUsed(&_Contract.CallOpts, performanceScheduleId, seatId)
}

// IsTicketUsed is a free data retrieval call binding the contract method 0x1a428694.
//
// Solidity: function isTicketUsed(uint32 performanceScheduleId, uint32 seatId) view returns(bool)
func (_Contract *ContractCallerSession) IsTicketUsed(performanceScheduleId uint32, seatId uint32) (bool, error) {
	return _Contract.Contract.IsTicketUsed(&_Contract.CallOpts, performanceScheduleId, seatId)
}

// MakeTokenId is a free data retrieval call binding the contract method 0x210f2158.
//
// Solidity: function makeTokenId(uint32 performanceScheduleId, uint32 seatId) pure returns(uint256)
func (_Contract *ContractCaller) MakeTokenId(opts *bind.CallOpts, performanceScheduleId uint32, seatId uint32) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "makeTokenId", performanceScheduleId, seatId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MakeTokenId is a free data retrieval call binding the contract method 0x210f2158.
//
// Solidity: function makeTokenId(uint32 performanceScheduleId, uint32 seatId) pure returns(uint256)
func (_Contract *ContractSession) MakeTokenId(performanceScheduleId uint32, seatId uint32) (*big.Int, error) {
	return _Contract.Contract.MakeTokenId(&_Contract.CallOpts, performanceScheduleId, seatId)
}

// MakeTokenId is a free data retrieval call binding the contract method 0x210f2158.
//
// Solidity: function makeTokenId(uint32 performanceScheduleId, uint32 seatId) pure returns(uint256)
func (_Contract *ContractCallerSession) MakeTokenId(performanceScheduleId uint32, seatId uint32) (*big.Int, error) {
	return _Contract.Contract.MakeTokenId(&_Contract.CallOpts, performanceScheduleId, seatId)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Contract *ContractCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Contract *ContractSession) Name() (string, error) {
	return _Contract.Contract.Name(&_Contract.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Contract *ContractCallerSession) Name() (string, error) {
	return _Contract.Contract.Name(&_Contract.CallOpts)
}

// ObtainPerformanceScheduleId is a free data retrieval call binding the contract method 0x6eed43a1.
//
// Solidity: function obtainPerformanceScheduleId(uint256 tokenId) pure returns(uint32)
func (_Contract *ContractCaller) ObtainPerformanceScheduleId(opts *bind.CallOpts, tokenId *big.Int) (uint32, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "obtainPerformanceScheduleId", tokenId)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// ObtainPerformanceScheduleId is a free data retrieval call binding the contract method 0x6eed43a1.
//
// Solidity: function obtainPerformanceScheduleId(uint256 tokenId) pure returns(uint32)
func (_Contract *ContractSession) ObtainPerformanceScheduleId(tokenId *big.Int) (uint32, error) {
	return _Contract.Contract.ObtainPerformanceScheduleId(&_Contract.CallOpts, tokenId)
}

// ObtainPerformanceScheduleId is a free data retrieval call binding the contract method 0x6eed43a1.
//
// Solidity: function obtainPerformanceScheduleId(uint256 tokenId) pure returns(uint32)
func (_Contract *ContractCallerSession) ObtainPerformanceScheduleId(tokenId *big.Int) (uint32, error) {
	return _Contract.Contract.ObtainPerformanceScheduleId(&_Contract.CallOpts, tokenId)
}

// ObtainSeatId is a free data retrieval call binding the contract method 0x3a28ea57.
//
// Solidity: function obtainSeatId(uint256 tokenId) pure returns(uint32)
func (_Contract *ContractCaller) ObtainSeatId(opts *bind.CallOpts, tokenId *big.Int) (uint32, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "obtainSeatId", tokenId)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// ObtainSeatId is a free data retrieval call binding the contract method 0x3a28ea57.
//
// Solidity: function obtainSeatId(uint256 tokenId) pure returns(uint32)
func (_Contract *ContractSession) ObtainSeatId(tokenId *big.Int) (uint32, error) {
	return _Contract.Contract.ObtainSeatId(&_Contract.CallOpts, tokenId)
}

// ObtainSeatId is a free data retrieval call binding the contract method 0x3a28ea57.
//
// Solidity: function obtainSeatId(uint256 tokenId) pure returns(uint32)
func (_Contract *ContractCallerSession) ObtainSeatId(tokenId *big.Int) (uint32, error) {
	return _Contract.Contract.ObtainSeatId(&_Contract.CallOpts, tokenId)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractSession) Owner() (common.Address, error) {
	return _Contract.Contract.Owner(&_Contract.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractCallerSession) Owner() (common.Address, error) {
	return _Contract.Contract.Owner(&_Contract.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Contract *ContractCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Contract *ContractSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Contract.Contract.OwnerOf(&_Contract.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Contract *ContractCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Contract.Contract.OwnerOf(&_Contract.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Contract *ContractCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Contract *ContractSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Contract.Contract.SupportsInterface(&_Contract.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Contract *ContractCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Contract.Contract.SupportsInterface(&_Contract.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contract *ContractCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contract *ContractSession) Symbol() (string, error) {
	return _Contract.Contract.Symbol(&_Contract.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contract *ContractCallerSession) Symbol() (string, error) {
	return _Contract.Contract.Symbol(&_Contract.CallOpts)
}

// TicketExpirationTimeOf is a free data retrieval call binding the contract method 0x6f074cce.
//
// Solidity: function ticketExpirationTimeOf(uint32 performanceScheduleId) view returns(uint256)
func (_Contract *ContractCaller) TicketExpirationTimeOf(opts *bind.CallOpts, performanceScheduleId uint32) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "ticketExpirationTimeOf", performanceScheduleId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TicketExpirationTimeOf is a free data retrieval call binding the contract method 0x6f074cce.
//
// Solidity: function ticketExpirationTimeOf(uint32 performanceScheduleId) view returns(uint256)
func (_Contract *ContractSession) TicketExpirationTimeOf(performanceScheduleId uint32) (*big.Int, error) {
	return _Contract.Contract.TicketExpirationTimeOf(&_Contract.CallOpts, performanceScheduleId)
}

// TicketExpirationTimeOf is a free data retrieval call binding the contract method 0x6f074cce.
//
// Solidity: function ticketExpirationTimeOf(uint32 performanceScheduleId) view returns(uint256)
func (_Contract *ContractCallerSession) TicketExpirationTimeOf(performanceScheduleId uint32) (*big.Int, error) {
	return _Contract.Contract.TicketExpirationTimeOf(&_Contract.CallOpts, performanceScheduleId)
}

// TicketOwnerOf is a free data retrieval call binding the contract method 0xa846b84b.
//
// Solidity: function ticketOwnerOf(uint32 performanceScheduleId, uint32 seatId) view returns(address)
func (_Contract *ContractCaller) TicketOwnerOf(opts *bind.CallOpts, performanceScheduleId uint32, seatId uint32) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "ticketOwnerOf", performanceScheduleId, seatId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TicketOwnerOf is a free data retrieval call binding the contract method 0xa846b84b.
//
// Solidity: function ticketOwnerOf(uint32 performanceScheduleId, uint32 seatId) view returns(address)
func (_Contract *ContractSession) TicketOwnerOf(performanceScheduleId uint32, seatId uint32) (common.Address, error) {
	return _Contract.Contract.TicketOwnerOf(&_Contract.CallOpts, performanceScheduleId, seatId)
}

// TicketOwnerOf is a free data retrieval call binding the contract method 0xa846b84b.
//
// Solidity: function ticketOwnerOf(uint32 performanceScheduleId, uint32 seatId) view returns(address)
func (_Contract *ContractCallerSession) TicketOwnerOf(performanceScheduleId uint32, seatId uint32) (common.Address, error) {
	return _Contract.Contract.TicketOwnerOf(&_Contract.CallOpts, performanceScheduleId, seatId)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Contract *ContractCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Contract *ContractSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Contract.Contract.TokenByIndex(&_Contract.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Contract *ContractCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Contract.Contract.TokenByIndex(&_Contract.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Contract *ContractCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Contract *ContractSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Contract.Contract.TokenOfOwnerByIndex(&_Contract.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Contract *ContractCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Contract.Contract.TokenOfOwnerByIndex(&_Contract.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Contract *ContractCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Contract *ContractSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Contract.Contract.TokenURI(&_Contract.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Contract *ContractCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Contract.Contract.TokenURI(&_Contract.CallOpts, tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contract *ContractCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contract *ContractSession) TotalSupply() (*big.Int, error) {
	return _Contract.Contract.TotalSupply(&_Contract.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contract *ContractCallerSession) TotalSupply() (*big.Int, error) {
	return _Contract.Contract.TotalSupply(&_Contract.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Contract *ContractTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Contract *ContractSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.Approve(&_Contract.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Contract *ContractTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.Approve(&_Contract.TransactOpts, to, tokenId)
}

// MarkTicketAsUsed is a paid mutator transaction binding the contract method 0x5fdac1a3.
//
// Solidity: function markTicketAsUsed(uint32 performanceScheduleId, uint32 seatId) returns()
func (_Contract *ContractTransactor) MarkTicketAsUsed(opts *bind.TransactOpts, performanceScheduleId uint32, seatId uint32) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "markTicketAsUsed", performanceScheduleId, seatId)
}

// MarkTicketAsUsed is a paid mutator transaction binding the contract method 0x5fdac1a3.
//
// Solidity: function markTicketAsUsed(uint32 performanceScheduleId, uint32 seatId) returns()
func (_Contract *ContractSession) MarkTicketAsUsed(performanceScheduleId uint32, seatId uint32) (*types.Transaction, error) {
	return _Contract.Contract.MarkTicketAsUsed(&_Contract.TransactOpts, performanceScheduleId, seatId)
}

// MarkTicketAsUsed is a paid mutator transaction binding the contract method 0x5fdac1a3.
//
// Solidity: function markTicketAsUsed(uint32 performanceScheduleId, uint32 seatId) returns()
func (_Contract *ContractTransactorSession) MarkTicketAsUsed(performanceScheduleId uint32, seatId uint32) (*types.Transaction, error) {
	return _Contract.Contract.MarkTicketAsUsed(&_Contract.TransactOpts, performanceScheduleId, seatId)
}

// MintTicket is a paid mutator transaction binding the contract method 0x3910ce65.
//
// Solidity: function mintTicket(address receipent, uint32 performanceScheduleId, uint32 seatId) returns()
func (_Contract *ContractTransactor) MintTicket(opts *bind.TransactOpts, receipent common.Address, performanceScheduleId uint32, seatId uint32) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "mintTicket", receipent, performanceScheduleId, seatId)
}

// MintTicket is a paid mutator transaction binding the contract method 0x3910ce65.
//
// Solidity: function mintTicket(address receipent, uint32 performanceScheduleId, uint32 seatId) returns()
func (_Contract *ContractSession) MintTicket(receipent common.Address, performanceScheduleId uint32, seatId uint32) (*types.Transaction, error) {
	return _Contract.Contract.MintTicket(&_Contract.TransactOpts, receipent, performanceScheduleId, seatId)
}

// MintTicket is a paid mutator transaction binding the contract method 0x3910ce65.
//
// Solidity: function mintTicket(address receipent, uint32 performanceScheduleId, uint32 seatId) returns()
func (_Contract *ContractTransactorSession) MintTicket(receipent common.Address, performanceScheduleId uint32, seatId uint32) (*types.Transaction, error) {
	return _Contract.Contract.MintTicket(&_Contract.TransactOpts, receipent, performanceScheduleId, seatId)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Contract *ContractTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Contract *ContractSession) RenounceOwnership() (*types.Transaction, error) {
	return _Contract.Contract.RenounceOwnership(&_Contract.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Contract *ContractTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Contract.Contract.RenounceOwnership(&_Contract.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Contract *ContractTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Contract *ContractSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.SafeTransferFrom(&_Contract.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Contract *ContractTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.SafeTransferFrom(&_Contract.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Contract *ContractTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Contract *ContractSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Contract.Contract.SafeTransferFrom0(&_Contract.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Contract *ContractTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Contract.Contract.SafeTransferFrom0(&_Contract.TransactOpts, from, to, tokenId, data)
}

// SchedulePerformance is a paid mutator transaction binding the contract method 0x06acb25f.
//
// Solidity: function schedulePerformance(uint32 performanceScheduleId, uint256 ticketExpirationTime, string ticketDefaultContentUrl, string ticketSpecialContentBaseUrl) returns()
func (_Contract *ContractTransactor) SchedulePerformance(opts *bind.TransactOpts, performanceScheduleId uint32, ticketExpirationTime *big.Int, ticketDefaultContentUrl string, ticketSpecialContentBaseUrl string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "schedulePerformance", performanceScheduleId, ticketExpirationTime, ticketDefaultContentUrl, ticketSpecialContentBaseUrl)
}

// SchedulePerformance is a paid mutator transaction binding the contract method 0x06acb25f.
//
// Solidity: function schedulePerformance(uint32 performanceScheduleId, uint256 ticketExpirationTime, string ticketDefaultContentUrl, string ticketSpecialContentBaseUrl) returns()
func (_Contract *ContractSession) SchedulePerformance(performanceScheduleId uint32, ticketExpirationTime *big.Int, ticketDefaultContentUrl string, ticketSpecialContentBaseUrl string) (*types.Transaction, error) {
	return _Contract.Contract.SchedulePerformance(&_Contract.TransactOpts, performanceScheduleId, ticketExpirationTime, ticketDefaultContentUrl, ticketSpecialContentBaseUrl)
}

// SchedulePerformance is a paid mutator transaction binding the contract method 0x06acb25f.
//
// Solidity: function schedulePerformance(uint32 performanceScheduleId, uint256 ticketExpirationTime, string ticketDefaultContentUrl, string ticketSpecialContentBaseUrl) returns()
func (_Contract *ContractTransactorSession) SchedulePerformance(performanceScheduleId uint32, ticketExpirationTime *big.Int, ticketDefaultContentUrl string, ticketSpecialContentBaseUrl string) (*types.Transaction, error) {
	return _Contract.Contract.SchedulePerformance(&_Contract.TransactOpts, performanceScheduleId, ticketExpirationTime, ticketDefaultContentUrl, ticketSpecialContentBaseUrl)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Contract *ContractTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Contract *ContractSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Contract.Contract.SetApprovalForAll(&_Contract.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Contract *ContractTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Contract.Contract.SetApprovalForAll(&_Contract.TransactOpts, operator, approved)
}

// SetTicketDefaultContentBaseUrl is a paid mutator transaction binding the contract method 0xf33df843.
//
// Solidity: function setTicketDefaultContentBaseUrl(uint32 performanceScheduleId, string newTicketDeafultContentBaseUrl) returns()
func (_Contract *ContractTransactor) SetTicketDefaultContentBaseUrl(opts *bind.TransactOpts, performanceScheduleId uint32, newTicketDeafultContentBaseUrl string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "setTicketDefaultContentBaseUrl", performanceScheduleId, newTicketDeafultContentBaseUrl)
}

// SetTicketDefaultContentBaseUrl is a paid mutator transaction binding the contract method 0xf33df843.
//
// Solidity: function setTicketDefaultContentBaseUrl(uint32 performanceScheduleId, string newTicketDeafultContentBaseUrl) returns()
func (_Contract *ContractSession) SetTicketDefaultContentBaseUrl(performanceScheduleId uint32, newTicketDeafultContentBaseUrl string) (*types.Transaction, error) {
	return _Contract.Contract.SetTicketDefaultContentBaseUrl(&_Contract.TransactOpts, performanceScheduleId, newTicketDeafultContentBaseUrl)
}

// SetTicketDefaultContentBaseUrl is a paid mutator transaction binding the contract method 0xf33df843.
//
// Solidity: function setTicketDefaultContentBaseUrl(uint32 performanceScheduleId, string newTicketDeafultContentBaseUrl) returns()
func (_Contract *ContractTransactorSession) SetTicketDefaultContentBaseUrl(performanceScheduleId uint32, newTicketDeafultContentBaseUrl string) (*types.Transaction, error) {
	return _Contract.Contract.SetTicketDefaultContentBaseUrl(&_Contract.TransactOpts, performanceScheduleId, newTicketDeafultContentBaseUrl)
}

// SetTicketSpecialContentBaseUrl is a paid mutator transaction binding the contract method 0x359e8129.
//
// Solidity: function setTicketSpecialContentBaseUrl(uint32 performanceScheduleId, string newTicketSpecialContentBaseUrl) returns()
func (_Contract *ContractTransactor) SetTicketSpecialContentBaseUrl(opts *bind.TransactOpts, performanceScheduleId uint32, newTicketSpecialContentBaseUrl string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "setTicketSpecialContentBaseUrl", performanceScheduleId, newTicketSpecialContentBaseUrl)
}

// SetTicketSpecialContentBaseUrl is a paid mutator transaction binding the contract method 0x359e8129.
//
// Solidity: function setTicketSpecialContentBaseUrl(uint32 performanceScheduleId, string newTicketSpecialContentBaseUrl) returns()
func (_Contract *ContractSession) SetTicketSpecialContentBaseUrl(performanceScheduleId uint32, newTicketSpecialContentBaseUrl string) (*types.Transaction, error) {
	return _Contract.Contract.SetTicketSpecialContentBaseUrl(&_Contract.TransactOpts, performanceScheduleId, newTicketSpecialContentBaseUrl)
}

// SetTicketSpecialContentBaseUrl is a paid mutator transaction binding the contract method 0x359e8129.
//
// Solidity: function setTicketSpecialContentBaseUrl(uint32 performanceScheduleId, string newTicketSpecialContentBaseUrl) returns()
func (_Contract *ContractTransactorSession) SetTicketSpecialContentBaseUrl(performanceScheduleId uint32, newTicketSpecialContentBaseUrl string) (*types.Transaction, error) {
	return _Contract.Contract.SetTicketSpecialContentBaseUrl(&_Contract.TransactOpts, performanceScheduleId, newTicketSpecialContentBaseUrl)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Contract *ContractTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Contract *ContractSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.TransferFrom(&_Contract.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Contract *ContractTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.TransferFrom(&_Contract.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Contract *ContractTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Contract *ContractSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Contract.Contract.TransferOwnership(&_Contract.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Contract *ContractTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Contract.Contract.TransferOwnership(&_Contract.TransactOpts, newOwner)
}

// ContractApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Contract contract.
type ContractApprovalIterator struct {
	Event *ContractApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractApproval represents a Approval event raised by the Contract contract.
type ContractApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Contract *ContractFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ContractApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractApprovalIterator{contract: _Contract.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Contract *ContractFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ContractApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractApproval)
				if err := _Contract.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Contract *ContractFilterer) ParseApproval(log types.Log) (*ContractApproval, error) {
	event := new(ContractApproval)
	if err := _Contract.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Contract contract.
type ContractApprovalForAllIterator struct {
	Event *ContractApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractApprovalForAll represents a ApprovalForAll event raised by the Contract contract.
type ContractApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Contract *ContractFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ContractApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ContractApprovalForAllIterator{contract: _Contract.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Contract *ContractFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ContractApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractApprovalForAll)
				if err := _Contract.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Contract *ContractFilterer) ParseApprovalForAll(log types.Log) (*ContractApprovalForAll, error) {
	event := new(ContractApprovalForAll)
	if err := _Contract.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Contract contract.
type ContractOwnershipTransferredIterator struct {
	Event *ContractOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractOwnershipTransferred represents a OwnershipTransferred event raised by the Contract contract.
type ContractOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Contract *ContractFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ContractOwnershipTransferredIterator{contract: _Contract.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Contract *ContractFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractOwnershipTransferred)
				if err := _Contract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Contract *ContractFilterer) ParseOwnershipTransferred(log types.Log) (*ContractOwnershipTransferred, error) {
	event := new(ContractOwnershipTransferred)
	if err := _Contract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Contract contract.
type ContractTransferIterator struct {
	Event *ContractTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTransfer represents a Transfer event raised by the Contract contract.
type ContractTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Contract *ContractFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ContractTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractTransferIterator{contract: _Contract.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Contract *ContractFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ContractTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTransfer)
				if err := _Contract.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Contract *ContractFilterer) ParseTransfer(log types.Log) (*ContractTransfer, error) {
	event := new(ContractTransfer)
	if err := _Contract.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
